// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class PeerAdd extends Table {
  public static PeerAdd getRootAsPeerAdd(ByteBuffer _bb) { return getRootAsPeerAdd(_bb, new PeerAdd()); }
  public static PeerAdd getRootAsPeerAdd(ByteBuffer _bb, PeerAdd obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public PeerAdd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int peer(int j) { int o = __offset(4); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int peerLength() { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer peerAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public iroha.Peer PeerAsIroha() { return PeerAsIroha(new iroha.Peer()); }
  public iroha.Peer PeerAsIroha(iroha.Peer obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(__vector(o)), bb) : null; }

  public static int createPeerAdd(FlatBufferBuilder builder,
      int peerOffset) {
    builder.startObject(1);
    PeerAdd.addPeer(builder, peerOffset);
    return PeerAdd.endPeerAdd(builder);
  }

  public static void startPeerAdd(FlatBufferBuilder builder) { builder.startObject(1); }
  public static void addPeer(FlatBufferBuilder builder, int peerOffset) { builder.addOffset(0, peerOffset, 0); }
  public static int createPeerVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startPeerVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endPeerAdd(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // peer
    return o;
  }
}

