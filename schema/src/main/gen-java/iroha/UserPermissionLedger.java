// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UserPermissionLedger extends Table {
  public static UserPermissionLedger getRootAsUserPermissionLedger(ByteBuffer _bb) { return getRootAsUserPermissionLedger(_bb, new UserPermissionLedger()); }
  public static UserPermissionLedger getRootAsUserPermissionLedger(ByteBuffer _bb, UserPermissionLedger obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UserPermissionLedger __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String ledgerName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ledgerNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public boolean domainAdd() { int o = __offset(6); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean domainRemove() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean peerAdd() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean peerRemove() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userAdd() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userRemove() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userGivePermission() { int o = __offset(18); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createUserPermissionLedger(FlatBufferBuilder builder,
      int ledger_nameOffset,
      boolean domain_add,
      boolean domain_remove,
      boolean peer_add,
      boolean peer_remove,
      boolean user_add,
      boolean user_remove,
      boolean user_give_permission) {
    builder.startObject(8);
    UserPermissionLedger.addLedgerName(builder, ledger_nameOffset);
    UserPermissionLedger.addUserGivePermission(builder, user_give_permission);
    UserPermissionLedger.addUserRemove(builder, user_remove);
    UserPermissionLedger.addUserAdd(builder, user_add);
    UserPermissionLedger.addPeerRemove(builder, peer_remove);
    UserPermissionLedger.addPeerAdd(builder, peer_add);
    UserPermissionLedger.addDomainRemove(builder, domain_remove);
    UserPermissionLedger.addDomainAdd(builder, domain_add);
    return UserPermissionLedger.endUserPermissionLedger(builder);
  }

  public static void startUserPermissionLedger(FlatBufferBuilder builder) { builder.startObject(8); }
  public static void addLedgerName(FlatBufferBuilder builder, int ledgerNameOffset) { builder.addOffset(0, ledgerNameOffset, 0); }
  public static void addDomainAdd(FlatBufferBuilder builder, boolean domainAdd) { builder.addBoolean(1, domainAdd, false); }
  public static void addDomainRemove(FlatBufferBuilder builder, boolean domainRemove) { builder.addBoolean(2, domainRemove, false); }
  public static void addPeerAdd(FlatBufferBuilder builder, boolean peerAdd) { builder.addBoolean(3, peerAdd, false); }
  public static void addPeerRemove(FlatBufferBuilder builder, boolean peerRemove) { builder.addBoolean(4, peerRemove, false); }
  public static void addUserAdd(FlatBufferBuilder builder, boolean userAdd) { builder.addBoolean(5, userAdd, false); }
  public static void addUserRemove(FlatBufferBuilder builder, boolean userRemove) { builder.addBoolean(6, userRemove, false); }
  public static void addUserGivePermission(FlatBufferBuilder builder, boolean userGivePermission) { builder.addBoolean(7, userGivePermission, false); }
  public static int endUserPermissionLedger(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // ledger_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static UserPermissionLedger lookupByKey(int vectorOffset, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int vectorLocation = bb.array().length - vectorOffset;
    int span = bb.getInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.array().length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new UserPermissionLedger().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

