// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Message extends Table {
  public static Message getRootAsMessage(ByteBuffer _bb) { return getRootAsMessage(_bb, new Message()); }
  public static Message getRootAsMessage(ByteBuffer _bb, Message obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Message __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String accPubKey() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer accPubKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public iroha.KeyValueObject data(int j) { return data(new iroha.KeyValueObject(), j); }
  public iroha.KeyValueObject data(iroha.KeyValueObject obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int dataLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }

  public static int createMessage(FlatBufferBuilder builder,
      int accPubKeyOffset,
      int dataOffset) {
    builder.startObject(2);
    Message.addData(builder, dataOffset);
    Message.addAccPubKey(builder, accPubKeyOffset);
    return Message.endMessage(builder);
  }

  public static void startMessage(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addAccPubKey(FlatBufferBuilder builder, int accPubKeyOffset) { builder.addOffset(0, accPubKeyOffset, 0); }
  public static void addData(FlatBufferBuilder builder, int dataOffset) { builder.addOffset(1, dataOffset, 0); }
  public static int createDataVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startDataVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endMessage(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // accPubKey
    return o;
  }
}

