// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ChaincodeExecute extends Table {
  public static ChaincodeExecute getRootAsChaincodeExecute(ByteBuffer _bb) { return getRootAsChaincodeExecute(_bb, new ChaincodeExecute()); }
  public static ChaincodeExecute getRootAsChaincodeExecute(ByteBuffer _bb, ChaincodeExecute obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ChaincodeExecute __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String codeName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer codeNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String domainName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer domainNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String ledgerName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ledgerNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }

  public static int createChaincodeExecute(FlatBufferBuilder builder,
      int code_nameOffset,
      int domain_nameOffset,
      int ledger_nameOffset) {
    builder.startObject(3);
    ChaincodeExecute.addLedgerName(builder, ledger_nameOffset);
    ChaincodeExecute.addDomainName(builder, domain_nameOffset);
    ChaincodeExecute.addCodeName(builder, code_nameOffset);
    return ChaincodeExecute.endChaincodeExecute(builder);
  }

  public static void startChaincodeExecute(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addCodeName(FlatBufferBuilder builder, int codeNameOffset) { builder.addOffset(0, codeNameOffset, 0); }
  public static void addDomainName(FlatBufferBuilder builder, int domainNameOffset) { builder.addOffset(1, domainNameOffset, 0); }
  public static void addLedgerName(FlatBufferBuilder builder, int ledgerNameOffset) { builder.addOffset(2, ledgerNameOffset, 0); }
  public static int endChaincodeExecute(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // code_name
    builder.required(o, 6);  // domain_name
    builder.required(o, 8);  // ledger_name
    return o;
  }
}

