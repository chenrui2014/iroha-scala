// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Signature extends Table {
  public static Signature getRootAsSignature(ByteBuffer _bb) { return getRootAsSignature(_bb, new Signature()); }
  public static Signature getRootAsSignature(ByteBuffer _bb, Signature obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Signature __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String publicKey() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer publicKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public int signature(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int signatureLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer signatureAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public long timestamp() { int o = __offset(8); return o != 0 ? bb.getLong(o + bb_pos) : 0L; }

  public static int createSignature(FlatBufferBuilder builder,
      int publicKeyOffset,
      int signatureOffset,
      long timestamp) {
    builder.startObject(3);
    Signature.addTimestamp(builder, timestamp);
    Signature.addSignature(builder, signatureOffset);
    Signature.addPublicKey(builder, publicKeyOffset);
    return Signature.endSignature(builder);
  }

  public static void startSignature(FlatBufferBuilder builder) { builder.startObject(3); }
  public static void addPublicKey(FlatBufferBuilder builder, int publicKeyOffset) { builder.addOffset(0, publicKeyOffset, 0); }
  public static void addSignature(FlatBufferBuilder builder, int signatureOffset) { builder.addOffset(1, signatureOffset, 0); }
  public static int createSignatureVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startSignatureVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addTimestamp(FlatBufferBuilder builder, long timestamp) { builder.addLong(2, timestamp, 0L); }
  public static int endSignature(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

