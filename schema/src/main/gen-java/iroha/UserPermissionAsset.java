// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UserPermissionAsset extends Table {
  public static UserPermissionAsset getRootAsUserPermissionAsset(ByteBuffer _bb) { return getRootAsUserPermissionAsset(_bb, new UserPermissionAsset()); }
  public static UserPermissionAsset getRootAsUserPermissionAsset(ByteBuffer _bb, UserPermissionAsset obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UserPermissionAsset __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String assetName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer assetNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String domainName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer domainNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String ledgerName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ledgerNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public boolean transfer() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean add() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean remove() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean create() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createUserPermissionAsset(FlatBufferBuilder builder,
      int asset_nameOffset,
      int domain_nameOffset,
      int ledger_nameOffset,
      boolean transfer,
      boolean add,
      boolean remove,
      boolean create) {
    builder.startObject(7);
    UserPermissionAsset.addLedgerName(builder, ledger_nameOffset);
    UserPermissionAsset.addDomainName(builder, domain_nameOffset);
    UserPermissionAsset.addAssetName(builder, asset_nameOffset);
    UserPermissionAsset.addCreate(builder, create);
    UserPermissionAsset.addRemove(builder, remove);
    UserPermissionAsset.addAdd(builder, add);
    UserPermissionAsset.addTransfer(builder, transfer);
    return UserPermissionAsset.endUserPermissionAsset(builder);
  }

  public static void startUserPermissionAsset(FlatBufferBuilder builder) { builder.startObject(7); }
  public static void addAssetName(FlatBufferBuilder builder, int assetNameOffset) { builder.addOffset(0, assetNameOffset, 0); }
  public static void addDomainName(FlatBufferBuilder builder, int domainNameOffset) { builder.addOffset(1, domainNameOffset, 0); }
  public static void addLedgerName(FlatBufferBuilder builder, int ledgerNameOffset) { builder.addOffset(2, ledgerNameOffset, 0); }
  public static void addTransfer(FlatBufferBuilder builder, boolean transfer) { builder.addBoolean(3, transfer, false); }
  public static void addAdd(FlatBufferBuilder builder, boolean add) { builder.addBoolean(4, add, false); }
  public static void addRemove(FlatBufferBuilder builder, boolean remove) { builder.addBoolean(5, remove, false); }
  public static void addCreate(FlatBufferBuilder builder, boolean create) { builder.addBoolean(6, create, false); }
  public static int endUserPermissionAsset(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // asset_name
    builder.required(o, 6);  // domain_name
    builder.required(o, 8);  // ledger_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static UserPermissionAsset lookupByKey(int vectorOffset, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int vectorLocation = bb.array().length - vectorOffset;
    int span = bb.getInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.array().length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new UserPermissionAsset().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

