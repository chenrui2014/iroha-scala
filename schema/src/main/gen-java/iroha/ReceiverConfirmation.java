// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class ReceiverConfirmation extends Table {
  public static ReceiverConfirmation getRootAsReceiverConfirmation(ByteBuffer _bb) { return getRootAsReceiverConfirmation(_bb, new ReceiverConfirmation()); }
  public static ReceiverConfirmation getRootAsReceiverConfirmation(ByteBuffer _bb, ReceiverConfirmation obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public ReceiverConfirmation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public iroha.Signature signature() { return signature(new iroha.Signature()); }
  public iroha.Signature signature(iroha.Signature obj) { int o = __offset(4); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public int hash(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int hashLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }

  public static int createReceiverConfirmation(FlatBufferBuilder builder,
      int signatureOffset,
      int hashOffset) {
    builder.startObject(2);
    ReceiverConfirmation.addHash(builder, hashOffset);
    ReceiverConfirmation.addSignature(builder, signatureOffset);
    return ReceiverConfirmation.endReceiverConfirmation(builder);
  }

  public static void startReceiverConfirmation(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addSignature(FlatBufferBuilder builder, int signatureOffset) { builder.addOffset(0, signatureOffset, 0); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(1, hashOffset, 0); }
  public static int createHashVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startHashVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endReceiverConfirmation(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

