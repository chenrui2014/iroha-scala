// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class UserPermissionDomain extends Table {
  public static UserPermissionDomain getRootAsUserPermissionDomain(ByteBuffer _bb) { return getRootAsUserPermissionDomain(_bb, new UserPermissionDomain()); }
  public static UserPermissionDomain getRootAsUserPermissionDomain(ByteBuffer _bb, UserPermissionDomain obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public UserPermissionDomain __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String domainName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer domainNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String ledgerName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ledgerNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public boolean userGivePermission() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userAdd() { int o = __offset(10); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean userRemove() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }

  public static int createUserPermissionDomain(FlatBufferBuilder builder,
      int domain_nameOffset,
      int ledger_nameOffset,
      boolean user_give_permission,
      boolean user_add,
      boolean user_remove) {
    builder.startObject(5);
    UserPermissionDomain.addLedgerName(builder, ledger_nameOffset);
    UserPermissionDomain.addDomainName(builder, domain_nameOffset);
    UserPermissionDomain.addUserRemove(builder, user_remove);
    UserPermissionDomain.addUserAdd(builder, user_add);
    UserPermissionDomain.addUserGivePermission(builder, user_give_permission);
    return UserPermissionDomain.endUserPermissionDomain(builder);
  }

  public static void startUserPermissionDomain(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addDomainName(FlatBufferBuilder builder, int domainNameOffset) { builder.addOffset(0, domainNameOffset, 0); }
  public static void addLedgerName(FlatBufferBuilder builder, int ledgerNameOffset) { builder.addOffset(1, ledgerNameOffset, 0); }
  public static void addUserGivePermission(FlatBufferBuilder builder, boolean userGivePermission) { builder.addBoolean(2, userGivePermission, false); }
  public static void addUserAdd(FlatBufferBuilder builder, boolean userAdd) { builder.addBoolean(3, userAdd, false); }
  public static void addUserRemove(FlatBufferBuilder builder, boolean userRemove) { builder.addBoolean(4, userRemove, false); }
  public static int endUserPermissionDomain(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // domain_name
    builder.required(o, 6);  // ledger_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static UserPermissionDomain lookupByKey(int vectorOffset, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int vectorLocation = bb.array().length - vectorOffset;
    int span = bb.getInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.array().length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new UserPermissionDomain().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

