// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Transaction extends Table {
  public static Transaction getRootAsTransaction(ByteBuffer _bb) { return getRootAsTransaction(_bb, new Transaction()); }
  public static Transaction getRootAsTransaction(ByteBuffer _bb, Transaction obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Transaction __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String creatorPubKey() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer creatorPubKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public byte commandType() { int o = __offset(6); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table command(Table obj) { int o = __offset(8); return o != 0 ?  __union(obj, o) : null; }
  public iroha.Signature signatures(int j) { return signatures(new iroha.Signature(), j); }
  public iroha.Signature signatures(iroha.Signature obj, int j) { int o = __offset(10); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int signaturesLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public int hash(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int hashLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer hashAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }
  public Attachment attachment() { return attachment(new Attachment()); }
  public Attachment attachment(Attachment obj) { int o = __offset(14); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }

  public static int createTransaction(FlatBufferBuilder builder,
      int creatorPubKeyOffset,
      byte command_type,
      int commandOffset,
      int signaturesOffset,
      int hashOffset,
      int attachmentOffset) {
    builder.startObject(6);
    Transaction.addAttachment(builder, attachmentOffset);
    Transaction.addHash(builder, hashOffset);
    Transaction.addSignatures(builder, signaturesOffset);
    Transaction.addCommand(builder, commandOffset);
    Transaction.addCreatorPubKey(builder, creatorPubKeyOffset);
    Transaction.addCommandType(builder, command_type);
    return Transaction.endTransaction(builder);
  }

  public static void startTransaction(FlatBufferBuilder builder) { builder.startObject(6); }
  public static void addCreatorPubKey(FlatBufferBuilder builder, int creatorPubKeyOffset) { builder.addOffset(0, creatorPubKeyOffset, 0); }
  public static void addCommandType(FlatBufferBuilder builder, byte commandType) { builder.addByte(1, commandType, 0); }
  public static void addCommand(FlatBufferBuilder builder, int commandOffset) { builder.addOffset(2, commandOffset, 0); }
  public static void addSignatures(FlatBufferBuilder builder, int signaturesOffset) { builder.addOffset(3, signaturesOffset, 0); }
  public static int createSignaturesVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startSignaturesVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addHash(FlatBufferBuilder builder, int hashOffset) { builder.addOffset(4, hashOffset, 0); }
  public static int createHashVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startHashVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addAttachment(FlatBufferBuilder builder, int attachmentOffset) { builder.addOffset(5, attachmentOffset, 0); }
  public static int endTransaction(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // creatorPubKey
    builder.required(o, 8);  // command
    builder.required(o, 10);  // signatures
    return o;
  }
}

