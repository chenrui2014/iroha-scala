// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class AssetAdd extends Table {
  public static AssetAdd getRootAsAssetAdd(ByteBuffer _bb) { return getRootAsAssetAdd(_bb, new AssetAdd()); }
  public static AssetAdd getRootAsAssetAdd(ByteBuffer _bb, AssetAdd obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public AssetAdd __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String accPubKey() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer accPubKeyAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public int asset(int j) { int o = __offset(6); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int assetLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer assetAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public iroha.Asset AssetAsIroha() { return AssetAsIroha(new iroha.Asset()); }
  public iroha.Asset AssetAsIroha(iroha.Asset obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o)), bb) : null; }

  public static int createAssetAdd(FlatBufferBuilder builder,
      int accPubKeyOffset,
      int assetOffset) {
    builder.startObject(2);
    AssetAdd.addAsset(builder, assetOffset);
    AssetAdd.addAccPubKey(builder, accPubKeyOffset);
    return AssetAdd.endAssetAdd(builder);
  }

  public static void startAssetAdd(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addAccPubKey(FlatBufferBuilder builder, int accPubKeyOffset) { builder.addOffset(0, accPubKeyOffset, 0); }
  public static void addAsset(FlatBufferBuilder builder, int assetOffset) { builder.addOffset(1, assetOffset, 0); }
  public static int createAssetVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startAssetVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endAssetAdd(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // accPubKey
    builder.required(o, 6);  // asset
    return o;
  }
}

