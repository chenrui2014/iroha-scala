// automatically generated by the FlatBuffers compiler, do not modify

package iroha;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Chaincode extends Table {
  public static Chaincode getRootAsChaincode(ByteBuffer _bb) { return getRootAsChaincode(_bb, new Chaincode()); }
  public static Chaincode getRootAsChaincode(ByteBuffer _bb, Chaincode obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; }
  public Chaincode __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String codeName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer codeNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public String domainName() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer domainNameAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public String ledgerName() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer ledgerNameAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public int language() { int o = __offset(10); return o != 0 ? bb.get(o + bb_pos) & 0xFF : 0; }
  public int code(int j) { int o = __offset(12); return o != 0 ? bb.get(__vector(o) + j * 1) & 0xFF : 0; }
  public int codeLength() { int o = __offset(12); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer codeAsByteBuffer() { return __vector_as_bytebuffer(12, 1); }

  public static int createChaincode(FlatBufferBuilder builder,
      int code_nameOffset,
      int domain_nameOffset,
      int ledger_nameOffset,
      int language,
      int codeOffset) {
    builder.startObject(5);
    Chaincode.addCode(builder, codeOffset);
    Chaincode.addLedgerName(builder, ledger_nameOffset);
    Chaincode.addDomainName(builder, domain_nameOffset);
    Chaincode.addCodeName(builder, code_nameOffset);
    Chaincode.addLanguage(builder, language);
    return Chaincode.endChaincode(builder);
  }

  public static void startChaincode(FlatBufferBuilder builder) { builder.startObject(5); }
  public static void addCodeName(FlatBufferBuilder builder, int codeNameOffset) { builder.addOffset(0, codeNameOffset, 0); }
  public static void addDomainName(FlatBufferBuilder builder, int domainNameOffset) { builder.addOffset(1, domainNameOffset, 0); }
  public static void addLedgerName(FlatBufferBuilder builder, int ledgerNameOffset) { builder.addOffset(2, ledgerNameOffset, 0); }
  public static void addLanguage(FlatBufferBuilder builder, int language) { builder.addByte(3, (byte)language, (byte)0); }
  public static void addCode(FlatBufferBuilder builder, int codeOffset) { builder.addOffset(4, codeOffset, 0); }
  public static int createCodeVector(FlatBufferBuilder builder, byte[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addByte(data[i]); return builder.endVector(); }
  public static void startCodeVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static int endChaincode(FlatBufferBuilder builder) {
    int o = builder.endObject();
    builder.required(o, 4);  // code_name
    builder.required(o, 6);  // domain_name
    builder.required(o, 8);  // ledger_name
    return o;
  }

  @Override
  protected int keysCompare(Integer o1, Integer o2, ByteBuffer _bb) { return compareStrings(__offset(4, o1, _bb), __offset(4, o2, _bb), _bb); }

  public static Chaincode lookupByKey(int vectorOffset, String key, ByteBuffer bb) {
    byte[] byteKey = key.getBytes(Table.UTF8_CHARSET.get());
    int vectorLocation = bb.array().length - vectorOffset;
    int span = bb.getInt(vectorLocation);
    int start = 0;
    vectorLocation += 4;
    while (span != 0) {
      int middle = span / 2;
      int tableOffset = __indirect(vectorLocation + 4 * (start + middle), bb);
      int comp = compareStrings(__offset(4, bb.array().length - tableOffset, bb), byteKey, bb);
      if (comp > 0) {
        span = middle;
      } else if (comp < 0) {
        middle++;
        start += middle;
        span -= middle;
      } else {
        return new Chaincode().__assign(tableOffset, bb);
      }
    }
    return null;
  }
}

